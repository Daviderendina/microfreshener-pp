description: robot-shop-v2
imports:
- {micro: 'https://di-unipi-socc.github.io/microTOSCA/1.1/microTOSCA.yaml'}
topology_template:
  groups:
    edge:
      members: [web.default.svc]
      type: micro.groups.Edge
  node_templates:
    cart.cart.default:
      requirements:
      - {interaction: redis.default.svc}
      - {interaction: catalogue.default.svc}
      type: micro.nodes.Service
    cart_2.cart.default:
      requirements:
      - {interaction: redis.default.svc}
      - {interaction: catalogue.default.svc}
      type: micro.nodes.Service
    cart.default.svc:
      requirements:
      - {interaction: cart.cart.default}
      - {interaction: cart_2.cart.default}
      type: micro.nodes.MessageRouter
    catalogue.catalogue.default:
      requirements: []
      type: micro.nodes.Service
    catalogue.default.svc:
      requirements:
      - {interaction: catalogue.catalogue.default}
      type: micro.nodes.MessageRouter
    dispatch.dispatch.default:
      requirements:
      - {interaction: rabbitmq.default.svc}
      type: micro.nodes.Service
    load.load.default:
      requirements:
      - {interaction: web.default.svc}
      type: micro.nodes.Service
    mongodb.mongodb.default:
      requirements: []
      type: micro.nodes.Service
    mongodb.default.svc:
      requirements:
      - {interaction: mongodb.mongodb.default}
      type: micro.nodes.MessageRouter
    mysql.mysql.default:
      requirements: []
      type: micro.nodes.Service
    mysql.default.svc:
      requirements:
      - {interaction: mysql.mysql.default}
      type: micro.nodes.MessageRouter
    payment.payment.default:
      requirements:
      - {interaction: user.default.svc}
      type: micro.nodes.Service
    payment.default.svc:
      requirements:
      - {interaction: payment.payment.default}
      type: micro.nodes.MessageRouter
    rabbitmq.rabbitmq.default:
      requirements: []
      type: micro.nodes.Service
    rabbitmq.default.svc:
      requirements:
      - {interaction: rabbitmq.rabbitmq.default}
      type: micro.nodes.MessageRouter
    ratings.ratings.default:
      requirements:
      - {interaction: catalogue.default.svc}
      - {interaction: mysql.default.svc}
      type: micro.nodes.Service
    ratings.default.svc:
      requirements:
      - {interaction: ratings.ratings.default}
      type: micro.nodes.MessageRouter
    redis.redis.default:
      requirements: []
      type: micro.nodes.Datastore
    redis.default.svc:
      requirements:
      - {interaction: redis.redis.default}
      type: micro.nodes.MessageRouter
    shipping.shipping.default:
      requirements:
      - {interaction: mysql.default.svc}
      - {interaction: cart.default.svc}
      type: micro.nodes.Service
    shipping.default.svc:
      requirements:
      - {interaction: shipping.shipping.default}
      type: micro.nodes.MessageRouter
    user.user.default:
      requirements: []
      type: micro.nodes.Service
    user.default.svc:
      requirements:
      - {interaction: user.user.default}
      type: micro.nodes.MessageRouter
    web.web.default:
      requirements:
      - {interaction: user.default.svc}
      - {interaction: payment.default.svc}
      - {interaction: shipping.default.svc}
      - {interaction: catalogue.default.svc}
      - {interaction: ratings.default.svc}
      - {interaction: cart.default.svc}
      type: micro.nodes.Service
    web.default.svc:
      requirements:
      - {interaction: web.web.default}
      type: micro.nodes.MessageRouter
  relationship_templates:
    c:
      properties: {circuit_breaker: true}
      type: micro.relationships.InteractsWith
    cd:
      properties: {circuit_breaker: true, dynamic_discovery: true}
      type: micro.relationships.InteractsWith
    d:
      properties: {dynamic_discovery: true}
      type: micro.relationships.InteractsWith
    t:
      properties: {timeout: true}
      type: micro.relationships.InteractsWith
    tc:
      properties: {circuit_breaker: true, timeout: true}
      type: micro.relationships.InteractsWith
    tcd:
      properties: {circuit_breaker: true, dynamic_discovery: true, timeout: true}
      type: micro.relationships.InteractsWith
    td:
      properties: {dynamic_discovery: true, timeout: true}
      type: micro.relationships.InteractsWith
tosca_definitions_version: micro_tosca_yaml_1.1
